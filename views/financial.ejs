<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <title>RMI/INSIGHTS |Dashboard</title>
 
  <meta content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no" name="viewport">
  
  <link rel="stylesheet" href="/public/bower_components/bootstrap/dist/css/bootstrap.min.css">
  <link rel="stylesheet" href="/public/bower_components/font-awesome/css/font-awesome.min.css">
  <link rel="stylesheet" href="/public/bower_components/Ionicons/css/ionicons.min.css">
  <link rel="stylesheet" href="/public/dist/css/Rmi.min.css">
  <link rel="stylesheet" href="/public/dist/css/skins/_all-skins.min.css">
  <link rel="stylesheet" href="/public/bower_components/bootstrap-datepicker/dist/css/bootstrap-datepicker.min.css">

    
    
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.js"/>
    
<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>
<script src="/public/dist/js/highcharts.src.js"></script>
 <script src="/public/dist/js/highcharts-drag-drop.js"></script>  
<!--<script src="https://rawgithub.com/highcharts/draggable-points/master/draggable-points.js"></script>-->
<!--<script src="https://code.highcharts.com/highcharts.js"></script>-->
<!--<script src="https://code.highcharts.com/modules/draggable-points.js"></script>-->
  
  <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,600,700,300italic,400italic,600italic">
    
</head>
<body class="hold-transition skin-blue sidebar-mini">
  <link type="text/css" rel="stylesheet" href="/public/dist/css/Graph-adjust.css">
<div class="wrapper">

  <header class="main-header">
   
    <a href="/" class="logo" style='padding-left:0px;background-color:#2c6484;margin-right:-15px'>
      
      <span class="logo-mini"><img src="\Public\dist\img\logo.png" width="150px" height="50px"></span>
     
      <span class="logo-lg"><img src="\Public\dist\img\logo.png" width="225px" height="30px"></span>
    </a>
    
        
     
      <nav class="navbar navbar-static-top"    style="height: 15px">
      
    <!--  <a href="#" class="sidebar-toggle" data-toggle="push-menu" role="button" style="padding-left: 5px;margin-top: 0px">
        <span class="sr-only">Toggle navigation</span>
   </a>-->
        <div class="pull-right">
            
<ul class="nav navbar-nav">
    <h2><li class="logoo"></li></h2>
            </ul>
        
      <div class="navbar-custom-menu">
        <ul class="nav navbar-nav" >
            
            
                <li class="dropdown user user-menu">
            <div>
            <a href="#" class="dropdown-toggle" data-toggle="dropdown">

              <a href="/subscribe" class="btn btn-primary" style="width:250px;height:40px;margin-top:5px">Subscription Type (90 days left)</a>
                     
            </a>
             
                </div>          
              
              
    
          </li>
          <li class="dropdown messages-menu">
            <a href="#" class="dropdown-toggle" data-toggle="dropdown" style="color:white">
              <i class="fa fa-envelope-o"></i>
              <span class="label label-success"></span>
            </a>
            <ul class="dropdown-menu">
              <li class="header">You have 4 messages</li>
              <li>
                <ul class="menu">
                  <li>
                    <a href="#">
                      <div class="pull-left">
                        
                      </div>
                      <h4>
                        Support Team
                        <small><i class="fa fa-clock-o"></i> 5 mins</small>
                      </h4>
                      <p>Why not buy a new awesome report?</p>
                    </a>
                  </li>
                 
                  <li>
                    <a href="#">
                      <div class="pull-left">
                        
                      </div>
                      <h4>
                        Reviewers
                        <small><i class="fa fa-clock-o"></i> 2 days</small>
                      </h4>
                      <p>Why not buy a new awesome theme?</p>
                    </a>
                  </li>
                </ul>
              </li>
              <li class="footer"><a href="#">See All Messages</a></li>
            </ul>
          </li>
          
          <li class="dropdown notifications-menu">
            <a href="#" class="dropdown-toggle" data-toggle="dropdown" style="color:white">
              <i class="fa fa-bell-o"></i>
              <span class="label label-warning">2</span>
            </a>
            <ul class="dropdown-menu">
              <li class="header">You have 2 notifications</li>
              <li>
               
                <ul class="menu">
                  <li>
                    <a href="#">
                      <i class="fa fa-users text-aqua"></i> 5 new members joined today
                    </a>
                  </li>
                 
                  
                  <li>
                    <a href="#">
                      <i class="fa fa-user text-red"></i> You changed your username
                    </a>
                  </li>
                </ul>
              </li>
              <li class="footer"><a href="#">View all</a></li>
            </ul>
          </li>

        
               <li>
            <a href="#" data-toggle="control-sidebar"><i class="fa fa-gears" style="color:white"></i></a>
          </li>
                      <li class="dropdown user user-menu">
            <a href="" class="dropdown-toggle" data-toggle="dropdown" style="color:white"style="color:white">
              <img src="\Public\dist\img\user.png" class="user-image" alt="User Image">
             <span> </span>
            </a>
            <ul class="dropdown-menu">
              <!-- User image -->
              <li class="user-header">
                <img src="\Public\dist\img\user.png" class="img-circle" alt="User Image">

                <p>
                  
                  <small>CEO</small>
                </p>
              </li>
              <!-- Menu Body -->
              <li class="user-body">
                <div class="row">
                  <div class="col-xs-4 text-center">
                    <a href="#">Followers</a>
                  </div>
                  <div class="col-xs-4 text-center">
                    <a href="#">Sales</a>
                  </div>
                  <div class="col-xs-4 text-center">
                    <a href="#">Friends</a>
                  </div>
                </div>
                 
              </li>
              <!-- Menu Footer-->
              <li class="user-footer">
                <div class="pull-left">
                  <a href="#" class="btn btn-default btn-flat">Profile</a>
                </div>
                <div class="pull-right">
                  <a href="#" class="btn btn-default btn-flat">Sign out</a>
                </div>
              </li>
            </ul>
          </li>
          </ul>
            </div>
        </div>
    </nav>
  </header>
 
   <aside class="main-sidebar"> 
    <section class="sidebar"> 
     
      <ul class="sidebar-menu" data-widget="tree">
       
           
          <li><a href="/source"><i class="fa fa-circle-o" ></i><span>Source Data</span></a></li>
          <li><a href="/index"><i class="fa fa-circle-o" ></i> <span>KPI Dashboard</span></a></li>
        
      
        <li class="treeview">
          <a href="#">
            <i class="fa fa-desktop"></i>
            <span>Monthly Budget</span>
            <span class="pull-right-container">
              <i class="fa fa-angle-right pull-right"></i>
            </span>
          </a>
          <ul class="treeview-menu">
            <li><a href="/adjust"><i class="fa fa-circle-o" ></i> Adjust Assumption</a></li>
            <li><a href="/actual" id="actualsId"><i class="fa fa-circle-o" ></i> Actuals</a></li>
            <li><a href="/target"><i class="fa fa-circle-o"></i> Target v/s Actuals</a></li>
          </ul>
        </li>
          
          
          <li class="treeview">
          <a href="#">
            <i class="fa fa-desktop"></i>
            <span>Financial Model</span>
            <span class="pull-right-container">
              <i class="fa fa-angle-right pull-right"></i>
            </span>
          </a>
          <ul class="treeview-menu">
            <li><a href="/financial"> Adjust Financial Model Drivers</a></li>
          
          </ul>
        </li>
  
           <li ><a href="/source"><i class="fa fa-paperclip"></i><span>Valuations</span></a></li>
             
                 
        
           
      </ul>
    </section>

  </aside>        
     <div class="content-wrapper">
    
         <section class="content-header">
      <h1 style="color:#3c8dbc;text-align:left">
     Adjust Financial Model Drivers
        
      </h1>
      <div class="btn-group">
        <a href="#chart-container"><button type="button" style="color:black;width:50px">Visual</button></a>
          <a href="#"><button type="button" style="color:black;width:50px">Excel</button></a>
          <a href="#"><button type="button" style="color:black;width:50px">Save</button></a>
          <a href="#"><button type="button" style="color:black;width:50px">PDF</button></a>
       
      </div>
    </section>
         
         
         
     <section class="content" style="height: 2103px;padding-left: 0px;padding-right: 372px;border-right-width: 0px;margin-right: 90px;padding-bottom: 0px;padding-top: 9px;">
<div class="container" style="margin-top:10px">
    <div class="row">
      <div class=nav-nav-custom style="height: 400px;padding-top:0px"><h1 style="text-align:left;color:#3c8dbc;font-size: 24px;margin-left:15px;">Assumptions</h1>
		<div class="scrollbar">
			<!--<div id="cona2">-->
			
		<div class="box" id="revenuegrowth" style="width:315px;padding-bottom:5px;"></div>
		
		<div class="box" id="cogs" style="width:315px;padding-bottom:5px;" ></div>
		<div class="box" id="SG&A" style="width:315px;padding-bottom:5px;"></div>
		<div class="box" id="D&A" style="width:315px;padding-bottom:5px;"></div>
		<div class="box" id="otheincome"style="width:315px;padding-bottom:5px;"></div>
		<div class="box"id="net-ie" style="width:315px;padding-bottom:5px;"></div>
		</div>
		</div>
		
		<div class=nav-nav-custom style="height: 460px;padding-top:0px"><h1 style="text-align:left;color:#3c8dbc;font-size: 24px;margin-left:15px">Projections</h1>
		<div class="scrolly">
		<div class="box one"id="projectionOne" style="height: 300px;width: 325px;margin-right:138px;padding-bottom:5px;"></div>
		<div class="box one"id="projectionTwo" style="height: 300px;width: 325px;right:137px;padding-bottom:5px;"></div>
		
		<div class="box one"id="projectionThree" style="height: 300px;width: 325px;overflow: hidden;right:150px;padding-bottom:5px;"></div>
		
		<div class="box one"id="projectionFour" style="height: 300px;width: 325px;overflow: hidden;bottom: 20px;margin-right:138px;padding-bottom:5px;"></div>
		<div class="box one"id="projectionFive" style="height: 300px;width: 325px;overflow: hidden;bottom: 20px;right:137px;padding-bottom:5px;"></div>
		<div class="box one"id="projectionSix" style="height: 300px;width: 325px;overflow: hidden;bottom: 20px;right:150px;padding-bottom:5px;"></div>
				</div>
		</div>
		</div>
	</div>
       
         
    
    </section>
    <hr>
    </div>
    
    </div>
 
    <script>
        
        
        
        var button='<button class="close" type="button" title="Remove this page">×</button>';
var tabID = 0;
function resetTab(){
	var tabs=$("#tab-list li:not(:first)");
	var len=1
	$(tabs).each(function(k,v){
		len++;
		$(this).find('a').html('Tab ' + len + button);
	})
	tabID--;
}

$(document).ready(function() {
    $('#btn-add-tab').click(function() {
        tabID++;
        $('#tab-list').append($('<li><a href="#tab' + tabID + '" role="tab" data-toggle="tab"><span>Custom Senario ' + tabID + '</span> <span class="glyphicon glyphicon-pencil text-muted edit"></span> <button class="close" type="button" title="Remove this page">×</button></a></li>'));
        $('#tab-content').append($('<div class="tab-pane fade" id="chart-container' + tabID + '">Custom Senario ' + tabID + ' content</div>'));
        $(".edit").click(editHandler);
    });
    
    $('#tab-list').on('click', '.close', function() {
        var tabID = $(this).parents('a').attr('href');
        $(this).parents('li').remove();
        $(tabID).remove();

        //display first tab
        var tabFirst = $('#tab-list a:first');
        resetTab();
        tabFirst.tab('show');
    });

    var list = document.getElementById("tab-list");
});

var editHandler = function() {
  var t = $(this);
  t.css("visibility", "hidden");
  $(this).prev().attr("contenteditable", "true").focusout(function() {
    $(this).removeAttr("contenteditable").off("focusout");
    t.css("visibility", "visible");
  });
};

$(".edit").click(editHandler);

</script>
            -->
         <!-- jQuery 3 -->
<script src="/public/bower_components/jquery/dist/jquery.min.js"></script>
<script src="/public/bower_components/jquery-ui/jquery-ui.min.js"></script>
<!-- Bootstrap 3.3.7 -->
<script src="/public/bower_components/bootstrap/dist/js/bootstrap.min.js"></script>
<script src="/public/dist/js/rmi.min.js"></script>
<script src="/public/dist/js/demo.js"></script>
    
    
    <script>
  $.widget.bridge('uibutton', $.ui.button);
</script>
<script src="/public/bower_components/moment/min/moment.min.js"></script>
<script src="/public/bower_components/bootstrap-daterangepicker/daterangepicker.js"></script>
<script src="/public/bower_components/bootstrap-datepicker/dist/js/bootstrap-datepicker.min.js"></script>

    <script src="/public/bower_components/jquery/dist/jquery.min1.js"></script>

	<script>
	
	
var yearsArray = [];
var companyName = window.location.href.split("=")[1];

$("#actualsId").attr("href","/actual?CompanyName="+companyName);
var assumptionArray = [];
let actualsInput = {
	"async": true,
	"crossDomain": true,
	"url": "http://34.67.197.111:8000/actuals?company="+companyName,
	"method": "GET",
	"headers": {
		"authorization": "Basic cm1pX3VzZXI6cm1pMzIxIUAj",
		"content-type": "application/json",
		"cache-control": "no-cache",
		"postman-token": "648dcbfa-30ef-3359-f29a-31b2038f29ac"
	},
	"processData": false,
}
	var actualObj = new Map();
	var rojectionObj = new Map();
	var actualXAxis = [];
	var assumptionArray = [];
	var previousAmount = 0;
	$.ajax(actualsInput).done(function (response){
			let resObject = JSON.parse(response);
			for (let j=0; j<resObject.length; j++) {
				if( resObject[j].latest === 0){
					previousAmount = resObject[j].totalrevenue;
				}
				actualObj.set(resObject[j].asof,{
					"totalRevenue":resObject[j].totalrevenue,
					"p_GrossProfit" : resObject[j].grossprofit, 
					"p_EBIT" : resObject[j].ebit, 
					"p_EBITDA" : resObject[j].ebitda, 
					"p_EBT" : resObject[j].ebt,
					"p_NetInCome" : resObject[j].netincome,
					"latest" : resObject[j].latest
					}
				);
			yearsArray.push(resObject[j].asof);
			}
		updateProjection(actualObj);			 
	});




let assumptionInput = {
	"async": true,
	"crossDomain": true,
	"url": "http://34.67.197.111:8000/projections?company="+companyName+"&scenario=0",
	"method": "GET",
	"headers": {
		"authorization": "Basic cm1pX3VzZXI6cm1pMzIxIUAj",
		"content-type": "application/json",
		"cache-control": "no-cache",
		"postman-token": "648dcbfa-30ef-3359-f29a-31b2038f29ac"
	},
	"processData": false,
}
	$.ajax(assumptionInput).done(function (response){
			let resObject = JSON.parse(response);
			if(Array.isArray(resObject)){
				assumptionInput.url = "http://34.67.197.111:8000/projections?company="+companyName+"&scenario=0";
				$.ajax(assumptionInput).done(function (response){
					resObject = JSON.parse(response);
					let totalRevenue = 0;
					let revenueGrowthArray = [];
					let COGSArray = [];
					let SGAndAArray = [];
					let DAndAArray = [];
					let otherIncomeOrExpenseArray = [];
					let netinterestdollarsArray = [];
					for (let j=0; j<resObject.length; j++) {
						if(j == 0){
							totalRevenue = Math.round(previousAmount + (previousAmount * (resObject[j].revenuepercent/100)));
						}else{
							totalRevenue = Math.round(resObject[j-1].totalRevenue + (resObject[j-1].totalRevenue * (resObject[j].revenuepercent/100)));
						}
						actualObj.set(resObject[j].asof,{
									"totalRevenue": totalRevenue,
									"revenueGrowth" : resObject[j].revenuepercent, 
									"COGS" : resObject[j].cogspercent, 
									"SGAndA" : resObject[j].sgapercent, 
									"DAndA" : resObject[j].dapercent,
									"netIterestExpense" : resObject[j].netinterestdollars,
									"otherIncomeOrExpense" :resObject[j].otherincomepercent,
									"taxes" :resObject[j].taxespercent,
									"latest" : resObject[j].latest
								}
						);
					yearsArray.push(resObject[j].asof);
					assumptionArray.push(resObject[j].asof)
					revenueGrowthArray.push(resObject[j].revenuepercent);
					COGSArray.push(resObject[j].cogspercent);
					SGAndAArray.push(resObject[j].sgapercent);
					DAndAArray.push(resObject[j].dapercent);
					otherIncomeOrExpenseArray.push(resObject[j].otherincomepercent);
					netinterestdollarsArray.push(resObject[j].netinterestdollars);
					}
					revenueGrowthChart.series[0].update({data:revenueGrowthArray});
					COGSChart.series[0].update({data:COGSArray});
					SGAndAChart.series[0].update({data:SGAndAArray});
					DAndAChart.series[0].update({data:DAndAArray});
					otherIncomeOrExpenseChart.series[0].update({data:otherIncomeOrExpenseArray});
					netIterestExpenseChart.series[0].update({data:netinterestdollarsArray});
					updateProjection(actualObj);
				});
			}			 
			
			
			
			
		});



	/*
	var obj = new Map();
	obj.set("2019",{"oldTotalRevenue" : 36397000, "revenueGrowth" : 6, "COGS" : 56, "SGAndA" : 30, "DAndA" : 2,"netIterestExpense" : 54000 ,"otherIncomeOrExpense" :0,"taxes" :21});
	obj.set("2020",{"oldTotalRevenue" : 38580820, "revenueGrowth" : 6, "COGS" : 56, "SGAndA" : 30, "DAndA" : 2,"netIterestExpense" : 54000 ,"otherIncomeOrExpense" :0,"taxes" :21});
	obj.set("2021",{"oldTotalRevenue" : 40895669, "revenueGrowth" : 6, "COGS" : 56, "SGAndA" : 30, "DAndA" : 2,"netIterestExpense" : 54000 ,"otherIncomeOrExpense" :0,"taxes" :21});
	obj.set("2022",{"oldTotalRevenue" : 43349409, "revenueGrowth" : 6, "COGS" : 56, "SGAndA" : 30, "DAndA" : 2,"netIterestExpense" : 54000 ,"otherIncomeOrExpense" :0,"taxes" :21});
	let tempLastYearTotalRevenue = 0;
	//var yearsArray = ["2019","2020","2021","2022"];
	for (const [key, value] of obj) {
		if(key === yearsArray[0]){
			obj.get(key).oldTotalRevenue = previousAmount;
		}
		
		obj.get(key).totalRevenue = Math.round(obj.get(key).oldTotalRevenue + (obj.get(key).oldTotalRevenue * (obj.get(key).revenueGrowth/100)));
		obj.get(key).p_COGS = Math.round(obj.get(key).totalRevenue * (obj.get(key).COGS/100));
		obj.get(key).p_GrossProfit = Math.round(obj.get(key).totalRevenue - obj.get(key).p_COGS);
		obj.get(key).p_SGAndA = Math.round(obj.get(key).totalRevenue * (obj.get(key).SGAndA/100));
		obj.get(key).p_EBIT = Math.round(obj.get(key).p_GrossProfit - obj.get(key).p_SGAndA);
		obj.get(key).p_DAndA = Math.round(obj.get(key).totalRevenue * (obj.get(key).DAndA/100));
		obj.get(key).p_EBITDA = Math.round(obj.get(key).p_EBIT + obj.get(key).p_DAndA);
		obj.get(key).p_NIE = obj.get(key).netIterestExpense;
		obj.get(key).p_OIOrE = Math.round(obj.get(key).totalRevenue * (obj.get(key).otherIncomeOrExpense/100));
		obj.get(key).p_EBT = Math.round(obj.get(key).p_EBIT - obj.get(key).p_NIE - obj.get(key).p_OIOrE);
		obj.get(key).p_taxes = Math.round(obj.get(key).p_EBT * (obj.get(key).taxes/100));
		obj.get(key).p_NetInCome = obj.get(key).p_EBT - obj.get(key).p_taxes;
		
	}*/
	/*	
$(function(){	
    var line,
    clickX,
    clickY;

    var start = function (e) {

        $(document).bind({
            'mousemove.line': step,
                'mouseup.line': stop
        });
        clickY = e.pageY - line.translateY;
    }

    var step = function (e) {
        line.translate(e.pageX - clickX, e.pageY - clickY)
    }

    var stop = function (e) {
        var chart =  $('#revenuegrowth').highcharts(),
            newVal = chart.yAxis[0].toValue(e.pageY - clickY + chart.plotLeft) + chart.yAxis[0].plotLinesAndBands[0].options.value;
        console.log(chart.yAxis[0].plotLinesAndBands);
        $("#report").text("Value: " + newVal);
        $(document).unbind('.line');
    }
	var revenueGrowthChart1 = new Highcharts.Chart({

    chart: {
        renderTo: 'revenuegrowth',
        animation: false
    },
    
    title: {
        text: 'Revenue Growth'
    },

    xAxis: {
        categories: assumptionArray
    },
		yAxis: {
			min : -50,
			max : 50,
			title: {
				text : 'In Percentage %'
			}
		},

    plotOptions: {
        series: {
	
	point: {
                events: {
                    drag: function (e) {},
                    drop: function (e) {  
					updateP_TotalRevenueChart(e.y,e.target.category,e.x);
                    }
                }
            },
	     stickyTracking: false
        },
        column: {
            stacking: 'normal',
	     minPointLength: 2
        },
        line: {
            cursor: 'ns-resize'
        }
    },

    tooltip: {
        yDecimals: 2
    },

    series: [{
	    name:'',
		data : [],
        //data: [obj.get(yearsArray[0]).revenueGrowth,obj.get(yearsArray[1]).revenueGrowth,obj.get(yearsArray[2]).revenueGrowth,obj.get(yearsArray[3]).revenueGrowth],
        //draggableX: true,
        draggableY: true,
        dragMinY: -50,
        dragMaxY: 50,
        type: 'column',
        minPointLength: 2
    }]

}*/
/*function (chart) {

        console.log(chart.yAxis[0].plotLinesAndBands[0]);

        line = chart.xAxis[0].plotLinesAndBands[0].Elem.attr({
            stroke: 'yellow'
        })
            .css({
            'cursor': 'pointer'
        })
            .translate(0, 0)
            .on('mousedown', start);


    }*///);
//});
	</script>
	<script>
	
	/*var revenueGrowthChart = new Highcharts.Chart({

    chart: {
        renderTo: 'cogs',
        animation: false
    },
    
    title: {
        text: 'COGS'
    },

    xAxis: {
        categories: yearsArray
    },
		yAxis: {
			allowDecimals:false,
			min : 0,
			max : 100,
			
			title : {
				text:'Percentage of Revenue'
			}
		},

    plotOptions: {
        series: {
            point: {
                events: {

                    drag: function (e) {},
                    drop: function () { 
						updatedCOGSChart(e.y,e.target.category,e.x);					
                    }
                }
            },
            stickyTracking: false
        },
        column: {
            stacking: 'normal'
        },
        line: {
            cursor: 'ns-resize'
        }
    },

    tooltip: {
        yDecimals: 2
    },

    series: [{
	    name: '',
		data : [],
        //data: [obj.get(yearsArray[0]).COGS,obj.get(yearsArray[1]).COGS,obj.get(yearsArray[2]).COGS,obj.get(yearsArray[3]).COGS],
        //draggableX: true,
        draggableY: true,
        dragMinY: 0,
        dragMaxY: 100,
		
        type: 'column',
        minPointLength: 2
    }
    ]

});*/
	</script>
   <script>
   
   var revenueGrowthChart = new Highcharts.Chart({

    chart: {
        renderTo: 'revenuegrowth',
        animation: false
    },
    
    title: {
        text: 'Revenue Growth'
    },

    xAxis: {
        categories: assumptionArray
    },
		yAxis: {
			min : -50,
			max : 50,
			title : {
				text:'In Percentage %'
			}
		},

    plotOptions: {
        series: {
            point: {
                events: {

                    drag: function (e) {
                    },
                    drop: function (e) {  
						updateP_TotalRevenueChart(e.y,e.target.category,e.x);
                    }
                }
            },
            stickyTracking: false
        },
        column: {
            stacking: 'normal',
			color:'grey'
        },
        line: {
            cursor: 'ns-resize'
        }
    },
colors: [	
	'grey',
       	'skyblue'
 ],
    tooltip: {
        yDecimals: 2,
		 valueDecimals: 0,
		valueSuffix:"%"
    },

    series: [{
	    name: '',
        data : [],
		//data: [obj.get(yearsArray[0]).COGS,obj.get(yearsArray[1]).COGS,obj.get(yearsArray[2]).COGS,obj.get(yearsArray[3]).COGS],
        //draggableX: true,
        draggableY: true,
        dragMinY: -50,
        dragMaxY: 50,
        type: 'column',
        minPointLength: 2,
		showInLegend: false
    }
    ]

});
   
   </script>
   
    <script>
   
   var COGSChart = new Highcharts.Chart({

    chart: {
        renderTo: 'cogs',
        animation: false
    },
    
    title: {
        text: 'COGS'
    },

    xAxis: {
        categories: assumptionArray
    },
		yAxis: {
			min : 0,
			max : 100,
			title : {
				text:'Percentage of Revenue'
			}
		},

    plotOptions: {
        series: {
            point: {
                events: {

                    drag: function (e) {
                        // Returning false stops the drag and drops. Example:
                        /*
                        if (e.newY > 300) {
                            this.y = 300;
                            return false;
                        }
                        */
   
                    },
                    drop: function (e) {  
						updatedCOGSChart(e.y,e.target.category,e.x);
                    }
                }
            },
            stickyTracking: false
        },
        column: {
            stacking: 'normal',
        },
        line: {
            cursor: 'ns-resize'
        }
    },
    colors: [
	                    'grey',
			                    'skyblue'
						                ],

    tooltip: {
        yDecimals: 2,
		 valueDecimals: 0,
		valueSuffix:"%"
    },

    series: [{
	    name: '',
        data : [],
		//data: [obj.get(yearsArray[0]).COGS,obj.get(yearsArray[1]).COGS,obj.get(yearsArray[2]).COGS,obj.get(yearsArray[3]).COGS],
        //draggableX: true,
        draggableY: true,
        dragMinY: 0,
        dragMaxY: 100,
        type: 'column',
        minPointLength: 2,
		showInLegend: false
    }
    ]

});
   
   </script>
   
   
	<script>
	
	var SGAndAChart = new Highcharts.Chart({

    chart: {
        renderTo: 'SG&A',
        animation: false
    },
    
    title: {
        text: 'SG&A'
    },

    xAxis: {
        categories: assumptionArray
    },
		yAxis:{
			min : 0,
			max : 100,
			title:{
				text: 'Percentage of Revenue'
			}
		},

    plotOptions: {
        series: {
            point: {
                events: {

                    drag: function (e) {
                        // Returning false stops the drag and drops. Example:
                        /*
                        if (e.newY > 300) {
                            this.y = 300;
                            return false;
                        }
                        */
   
                    },
                    drop: function (e) {  
						updatedSGAndAChart(e.y,e.target.category,e.x);
                    }
                }
            },
            stickyTracking: false
        },
        column: {
            stacking: 'normal',
			color:'grey'
        },
        line: {
            cursor: 'ns-resize'
        }
    },
    colors: [
	                    'grey',
			                    'skyblue'
						                ],

    tooltip: {
        yDecimals: 2,
		 valueDecimals: 0,
		valueSuffix:"%"
    },

    series: [{
	    name:'',
        data : [],
		//data: [obj.get(yearsArray[0]).SGAndA,obj.get(yearsArray[1]).SGAndA,obj.get(yearsArray[2]).SGAndA,obj.get(yearsArray[3]).SGAndA],
        //draggableX: true,
        draggableY: true,
        dragMinY: 0,
        dragMaxY: 100,
        type: 'column',
        minPointLength: 2,
		showInLegend: false
    }
    ]

});
	</script>
   
    <script>
	
	var DAndAChart = new Highcharts.Chart({

    chart: {
        renderTo: 'D&A',
        animation: false
    },
    
    title: {
        text: 'D&A'
    },

    xAxis: {
        categories: assumptionArray
    },
		yAxis:{
			min: 0,
			max: 100,
			title:{
				text:'Percentage of Revenue'
			}
		},

    plotOptions: {
        series: {
            point: {
                events: {

                    drag: function (e) {
                        // Returning false stops the drag and drops. Example:
                        /*
                        if (e.newY > 300) {
                            this.y = 300;
                            return false;
                        }
                        */
   
                    },
                    drop: function (e) {
						updatedDAndAChart(e.y,e.target.category,e.x);					
                    }
                }
            },
            stickyTracking: false
        },
        column: {
            stacking: 'normal',
			color:'grey'
        },
        line: {
            cursor: 'ns-resize'
        }
    },

    tooltip: {
        yDecimals: 2,
		 valueDecimals: 0,
		valueSuffix:"%"
    },

    series: [{
	    name:'',
        data : [],
		//data: [obj.get(yearsArray[0]).DAndA,obj.get(yearsArray[1]).DAndA,obj.get(yearsArray[2]).DAndA,obj.get(yearsArray[3]).DAndA],
        //draggableX: true,
        draggableY: true,
        dragMinY: 0,
        dragMaxY: 100,
        type: 'column',
        minPointLength: 2,
		showInLegend: false
    }
    ]

});
	</script>
	<script>
	
	var otherIncomeOrExpenseChart = new Highcharts.Chart({

    chart: {
        renderTo: 'otheincome',
        animation: false
    },
    
    title: {
        text: 'Other Income / Expense'
    },

    xAxis: {
        categories: assumptionArray
    },
		yAxis:{
			min:-50,
			max:50,
			title:{
				text:'Percentage of Revenue'
			}
		},
    plotOptions: {
        series: {
            point: {
                events: {

                    drag: function (e) {
                        // Returning false stops the drag and drops. Example:
                        /*
                        if (e.newY > 300) {
                            this.y = 300;
                            return false;
                        }
                        */
   
                    },
                    drop: function (e) {  
						updatedOtherIncomeChart(e.y,e.target.category,e.x);
                    }
                }
            },
            stickyTracking: false
        },
        column: {
            stacking: 'normal',
			color:'grey'
        },
        line: {
            cursor: 'ns-resize'
        }
    },

    tooltip: {
        yDecimals: 2,
		 valueDecimals: 0,
		valueSuffix:"%"
    },

    series: [{
	    name:'',
        data : [],
		//data: [obj.get(yearsArray[0]).otherIncomeOrExpense,obj.get(yearsArray[1]).otherIncomeOrExpense,obj.get(yearsArray[2]).otherIncomeOrExpense,obj.get(yearsArray[3]).otherIncomeOrExpense],
        //draggableX: true,
        draggableY: true,
        dragMinY: -50,
        dragMaxY: 50,
        type: 'column',
        minPointLength: 2,
		showInLegend: false
    }
    ]

});
	</script>
        <script>

        var netIterestExpenseChart = new Highcharts.Chart({

    chart: {
        renderTo: 'net-ie',
        animation: false
    },
    
    title: {
        text: 'Net Interest Expense'
    },

    xAxis: {
        categories: assumptionArray
    },
		yAxis: {
			title: {
				text:'USD'
			}
		},

    plotOptions: {
        series: {
            point: {
                events: {

                    drag: function (e) {
                        // Returning false stops the drag and drops. Example:
                        /*
                        if (e.newY > 300) {
                            this.y = 300;
                            return false;
                        }
                        */
   
                    },
                    drop: function () {  
                    }
                }
            },
            stickyTracking: false
        },
        column: {
            stacking: 'normal',
			color:'grey'
        },
        line: {
            cursor: 'ns-resize'
        }
    },

    tooltip: {
        yDecimals: 2,
		 valueDecimals: 0,
		valueSuffix:"%"
    },

    series: [{
	    name:'',
        data : [],
		//data: [obj.get(yearsArray[0]).netIterestExpense,obj.get(yearsArray[1]).netIterestExpense,obj.get(yearsArray[2]).netIterestExpense,obj.get(yearsArray[3]).netIterestExpense],
        //draggableX: true,
        draggableY: true,
        dragMinY: 0,
        type: 'column',
        minPointLength: 2,
		showInLegend: false
    }
    ]

});


</script>


<script>

        var chart = new Highcharts.Chart({

    chart: {
        renderTo: 'taxes',
        animation: false
    },
    
    title: {
        text: 'Taxes ($)'
    },

    xAxis: {
        categories: yearsArray
    },
	yAxis : {
		title : {
			text : 'In USD'
		}
	},
    plotOptions: {
        series: {
            point: {
                events: {

                    drag: function (e) {
                        // Returning false stops the drag and drops. Example:
                        /*
                        if (e.newY > 300) {
                            this.y = 300;
                            return false;
                        }
                        */
   
                    },
                    drop: function () {  
                    }
                }
            },
            stickyTracking: false
        },
        column: {
            stacking: 'normal',
	    colorByPoint:true'
        },
        line: {
            cursor: 'ns-resize'
        }
    },
    colors: [
	   'grey','skyblue'],

    tooltip: {
        yDecimals: 2
    },

    series: [{
	name: '',
        data: [30, 30.5, 30.4, 30.2],
        //draggableX: true,
        draggableY: true,
        dragMinY: 0,
        type: 'column',
        minPointLength: 2,
		showInLegend: false
    }
    ]

});
</script>
<script>

        var chart = new Highcharts.Chart({

    chart: {
        renderTo: 'actualstotalrevenue',
        animation: false
    },
    
    title: {
       text: ''
    },

    xAxis: {
        categories: yearsArray
    },
        yAxis : {
		min : 0,
		max : 100,
                title : {
                        text : 'In USD '
                }
        },
    plotOptions: {
        series: {
            point: {
                events: {

                    drag: function (e) {
                        // Returning false stops the drag and drops. Example:
                        /*
                        if (e.newY > 300) {
                            this.y = 300;
                            return false;
                        }
                        */
   
                    },
                    drop: function () {  
                    }
                }
            },
            stickyTracking: false
        },
        column: {
            stacking: 'normal',
			colorByPoint:true
        },
        line: {
            cursor: 'ns-resize'
        }
    },

    tooltip: {
        yDecimals: 2
    },
    colors: [
	    			     'grey','skyblue'],

    series: [{
        name: '',
        data: [25, 25, 25, 50],
        //draggableX: true,
        draggableY: false,
        dragMinY: 0,
        type: 'column',
        minPointLength: 2,
		showInLegend: false
    }
    ]

});
</script>

<script>
	 Highcharts.setOptions({
		lang: {
			thousandsSep: ','
		}
	});

        var p_totalRevenueChart = new Highcharts.Chart({

    chart: {
        renderTo: 'projectionOne',
        animation: false
    },
    
    title: {
       text: 'Total Revenue'
    },

    xAxis: {
        categories: yearsArray
    },
        yAxis : {
		min : 0,
		max : 100000000,
                title : {
                        text : 'In USD '
                }
        },
    plotOptions: {
        series: {
            point: {
                events: {

                    drag: function (e) {
                        // Returning false stops the drag and drops. Example:
                        /*
                        if (e.newY > 300) {
                            this.y = 300;
                            return false;
                        }
                        */
   
                    },
                    drop: function () {  
                    }
                }
            },
            stickyTracking: false
        },
        column: {
            stacking: 'normal',
	    colorByPoint:true,
		
        },
        line: {
            cursor: 'ns-resize'
        }
    },

    tooltip: {
         yDecimals: 2,
		valuePrefix:"$",
		minRange:1
    },
colors: [
				     'grey','skyblue'],
    series: [{
        name: '',
		data : [],
		//data: [obj.get(yearsArray[0]).totalRevenue,obj.get(yearsArray[1]).totalRevenue,obj.get(yearsArray[2]).totalRevenue,obj.get(yearsArray[3]).totalRevenue],
        //draggableX: true,
        draggableY: false,
        dragMinY: 0,
        type: 'column',
        minPointLength: 2,
		showInLegend: false,
		color:'grey'
    }
    ]

});
</script>



<script>

        var p_grossProfitChart = new Highcharts.Chart({

    chart: {
        renderTo: 'projectionTwo',
        animation: false
    },
    
    title: {
       text: 'Gross Profit'
    },

    xAxis: {
        categories: yearsArray
    },
        yAxis : {
		min : 0,
		max : 100000000,
                title : {
                        text : 'In USD '
                }
        },
    plotOptions: {
        series: {
            point: {
                events: {

                    drag: function (e) {
                        // Returning false stops the drag and drops. Example:
                        /*
                        if (e.newY > 300) {
                            this.y = 300;
                            return false;
                        }
                        */
   
                    },
                    drop: function () {  
                    }
                }
            },
            stickyTracking: false
        },
        column: {
            stacking: 'normal',
			colorByPoint:true
        },
        line: {
            cursor: 'ns-resize'
        }
    },

    tooltip: {
         yDecimals: 2,
		valuePrefix:"$",
		minRange:1
    },
colors: [
				     'grey','skyblue'],
    series: [{
        name: '',
        data : [],
		//data: [obj.get(yearsArray[0]).p_GrossProfit,obj.get(yearsArray[1]).p_GrossProfit,obj.get(yearsArray[2]).p_GrossProfit,obj.get(yearsArray[3]).p_GrossProfit],
        //draggableX: true,
        draggableY: false,
        dragMinY: 0,
        type: 'column',
        minPointLength: 2,
		showInLegend: false
    }
    ]

});
</script>

	<script>

        var p_EBITChart = new Highcharts.Chart({

    chart: {
        renderTo: 'projectionThree',
        animation: false
    },
    
    title: {
       text: 'EBIT'
    },

    xAxis: {
        categories: yearsArray
    },
        yAxis : {
		min : 0,
		max : 50000000,
                title : {
                        text : 'In USD '
                }
        },
    plotOptions: {
        series: {
            point: {
                events: {

                    drag: function (e) {
                        // Returning false stops the drag and drops. Example:
                        /*
                        if (e.newY > 300) {
                            this.y = 300;
                            return false;
                        }
                        */
   
                    },
                    drop: function () {  
                    }
                }
            },
            stickyTracking: false
        },
        column: {
            stacking: 'normal',
			colorByPoint:true
        },
        line: {
            cursor: 'ns-resize'
        }
    },

    tooltip: {
         yDecimals: 2,
		valuePrefix:"$",
		minRange:1
    },
    colors: [
	    			     'grey','skyblue'],

    series: [{
        name: '',        
		data : [],
		//data: [obj.get(yearsArray[0]).p_EBIT,obj.get(yearsArray[1]).p_EBIT,obj.get(yearsArray[2]).p_EBIT,obj.get(yearsArray[3]).p_EBIT],
        draggableY: false,
        dragMinY: 0,
        type: 'column',
        minPointLength: 2,
		showInLegend: false
    }
    ]

});
</script>
	<script>

        var p_EBITDAChart = new Highcharts.Chart({

    chart: {
        renderTo: 'projectionFour',
        animation: false
    },
    
    title: {
       text: 'EBITDA'
    },

    xAxis: {
        categories: yearsArray
    },
        yAxis : {
		min : 0,
		max : 50000000,
                title : {
                        text : 'In USD '
                }
        },
    plotOptions: {
        series: {
            point: {
                events: {

                    drag: function (e) {
                        // Returning false stops the drag and drops. Example:
                        /*
                        if (e.newY > 300) {
                            this.y = 300;
                            return false;
                        }
                        */
   
                    },
                    drop: function () {  
                    }
                }
            },
            stickyTracking: false
        },
        column: {
            stacking: 'normal',
			colorByPoint:true
        },
        line: {
            cursor: 'ns-resize'
        }
    },

    tooltip: {
         yDecimals: 2,
		valuePrefix:"$",
		minRange:1
    },
    colors: [
	    			     'grey','skyblue'],

    series: [{
        name: '',
		data : [],
		//data: [obj.get(yearsArray[0]).p_EBITDA,obj.get(yearsArray[1]).p_EBITDA,obj.get(yearsArray[2]).p_EBITDA,obj.get(yearsArray[3]).p_EBITDA],
        //draggableX: true,
        draggableY: false,
        dragMinY: 0,
        type: 'column',
        minPointLength: 2,
		showInLegend: false
    }
    ]

});
</script>
	<script>

        var p_EBTChart = new Highcharts.Chart({

    chart: {
        renderTo: 'projectionFive',
        animation: false
    },
    
    title: {
       text: 'EBT'
    },

    xAxis: {
        categories: yearsArray
    },
        yAxis : {
		min : 0,
		max : 50000000,
                title : {
                        text : 'In USD '
                }
        },
    plotOptions: {
        series: {
            point: {
                events: {

                    drag: function (e) {
                        // Returning false stops the drag and drops. Example:
                        /*
                        if (e.newY > 300) {
                            this.y = 300;
                            return false;
                        }
                        */
   
                    },
                    drop: function () {  
                    }
                }
            },
            stickyTracking: false
        },
        column: {
            stacking: 'normal',
			colorByPoint:true
        },
        line: {
            cursor: 'ns-resize'
        }
    },

    tooltip: {
         yDecimals: 2,
		valuePrefix:"$",
		minRange:1
    },
colors: [
				     'grey','skyblue'],
    series: [{
        name: '',
        data : [],
		//data: [obj.get(yearsArray[0]).p_EBT,obj.get(yearsArray[1]).p_EBT,obj.get(yearsArray[2]).p_EBT,obj.get(yearsArray[3]).p_EBT],
        //draggableX: true,
        draggableY: false,
        dragMinY: 0,
        type: 'column',
        minPointLength: 2,
		showInLegend: false
    }
    ]

});
</script>
	<script>

        var p_NetInComeArrayChart = new Highcharts.Chart({

    chart: {
        renderTo: 'projectionSix',
        animation: false
    },
    
    title: {
       text: 'Net Income'
    },

    xAxis: {
        categories: yearsArray
    },
        yAxis : {
		min : 0,
		max : 50000000,
                title : {
                        text : 'In USD '
                }
        },
    plotOptions: {
        series: {
            point: {
                events: {

                    drag: function (e) {
                        // Returning false stops the drag and drops. Example:
                        /*
                        if (e.newY > 300) {
                            this.y = 300;
                            return false;
                        }
                        */
   
                    },
                    drop: function () {  
                    }
                }
            },
            stickyTracking: false
        },
        column: {
            stacking: 'normal',
			colorByPoint:true
        },
        line: {
            cursor: 'ns-resize'
        }
    },

    tooltip: {
         yDecimals: 2,
		valuePrefix:"$",
		minRange:1
    },
colors: [
				     'grey','skyblue'],
    series: [{
        name: '',
        data : [],
		//data: [obj.get(yearsArray[0]).p_NetInCome,obj.get(yearsArray[1]).p_NetInCome,obj.get(yearsArray[2]).p_NetInCome,obj.get(yearsArray[3]).p_NetInCome],
        //draggableX: true,
        draggableY: false,
        dragMinY: 0,
        type: 'column',
        minPointLength: 2,
		showInLegend: false
    }
    ]

});
</script>
	<script>

        var chart = new Highcharts.Chart({

    chart: {
        renderTo: 'actualsebt',
        animation: false
    },
    
    title: {
       text: ''
    },

    xAxis: {
        categories: ["may312017","may312018","may312019","may312020"]
    },
        yAxis : {
		min : 0,
		max : 100,
                title : {
                        text : 'In USD $'
                }
        },
    plotOptions: {
        series: {
            point: {
                events: {

                    drag: function (e) {
                        // Returning false stops the drag and drops. Example:
                        /*
                        if (e.newY > 300) {
                            this.y = 300;
                            return false;
                        }
                        */
   
                    },
                    drop: function () {  
                    }
                }
            },
            stickyTracking: false
        },
        column: {
            stacking: 'normal'
        },
        line: {
            cursor: 'ns-resize'
        }
    },

    tooltip: {
        yDecimals: 2
    },

    series: [{
        name: '',
        data: [25, 25, 25, 25],
        //draggableX: true,
        draggableY: false,
        dragMinY: 0,
        type: 'column',
        minPointLength: 2,
    }
    ]

});

function updateP_TotalRevenueChart(x,y,index){
	actualObj.get(y).revenueGrowth = x;
	updateProjection(actualObj);
}
function updatedCOGSChart(x,y,index){
	actualObj.get(y).COGS = x;
	updateProjection(actualObj);
}
function updatedSGAndAChart(x,y,index){
	actualObj.get(y).SGAndA = x;
	updateProjection(actualObj);
}
function updatedDAndAChart(x,y,index){
	actualObj.get(y).DAndA = x;
	updateProjection(actualObj);
}
function updatedOtherIncomeChart(x,y,index){
	actualObj.get(y).otherIncomeOrExpense = x;
	updateProjection(actualObj);
}

function updateProjection(obj){
	let totalRevenueArray = [];
	let p_GrossProfitArray = [];
	let p_EBITArray = [];
	let p_EBITDAArray = [];
	let p_EBTArray = [];
	let p_NetInComeArray =[];
	//let revenueGrowthArray =[];
	let lastKey = 0;
	for (let [key, value] of obj) {
		if(typeof obj.get(key).COGS !== 'undefined'){
			obj.get(key).totalRevenue = Math.round(obj.get(lastKey).totalRevenue + (obj.get(lastKey).totalRevenue * (obj.get(key).revenueGrowth/100)));
			obj.get(key).p_COGS = Math.round(obj.get(key).totalRevenue * (obj.get(key).COGS/100));
			obj.get(key).p_GrossProfit = Math.round(obj.get(key).totalRevenue - obj.get(key).p_COGS);
			obj.get(key).p_SGAndA = Math.round(obj.get(key).totalRevenue * (obj.get(key).SGAndA/100));
			obj.get(key).p_EBIT = Math.round(obj.get(key).p_GrossProfit - obj.get(key).p_SGAndA);
			obj.get(key).p_DAndA = Math.round(obj.get(key).totalRevenue * (obj.get(key).DAndA/100));
			obj.get(key).p_EBITDA = Math.round(obj.get(key).p_EBIT + obj.get(key).p_DAndA);
			obj.get(key).p_NIE = obj.get(key).netIterestExpense;
			obj.get(key).p_OIOrE = Math.round(obj.get(key).totalRevenue * (obj.get(key).otherIncomeOrExpense/100));
			obj.get(key).p_EBT = Math.round(obj.get(key).p_EBIT - obj.get(key).p_NIE - obj.get(key).p_OIOrE);
			obj.get(key).p_taxes = Math.round(obj.get(key).p_EBT * (obj.get(key).taxes/100));
			obj.get(key).p_NetInCome = obj.get(key).p_EBT - obj.get(key).p_taxes;
			//revenueGrowthArray.push(obj.get(key).revenueGrowth);
			}
			totalRevenueArray.push(obj.get(key).totalRevenue);
			p_GrossProfitArray.push(obj.get(key).p_GrossProfit);
			p_EBITArray.push(obj.get(key).p_EBIT);
			p_EBITDAArray.push(obj.get(key).p_EBITDA);
			p_EBTArray.push(obj.get(key).p_EBT);
			p_NetInComeArray.push(obj.get(key).p_NetInCome);
			lastKey = key;
	}
	
	p_totalRevenueChart.series[0].update({data: totalRevenueArray});
	p_grossProfitChart.series[0].update({data: p_GrossProfitArray});
	p_EBITChart.series[0].update({data:p_EBITArray});
	p_EBITDAChart.series[0].update({data:p_EBITDAArray});
	p_EBTChart.series[0].update({data:p_EBTArray});
	p_NetInComeArrayChart.series[0].update({data:p_NetInComeArray});
	//revenueGrowthChart.series[0].update({data:revenueGrowthArray});
}
</script>
	
    </body>
</html>
  
